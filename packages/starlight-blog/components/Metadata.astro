---
import { Badge, Icon } from '@astrojs/starlight/components'

import { getBlogEntryMetadata, type StarlightBlogEntry } from '../libs/content'
import type { Locale } from '../libs/i18n'
import { formatReadingTime, getReadingTime } from '../libs/readingTime'

import Author from './Author.astro'

interface Props {
  entry: StarlightBlogEntry
  locale: Locale
  showBadges?: boolean
  showReadingTime?: boolean
}

const { entry, locale, showBadges = true, showReadingTime = true } = Astro.props
const { authors, date, lastUpdated } = getBlogEntryMetadata(entry, locale)

const hasAuthors = authors.length > 0

const readingTime = getReadingTime(entry, entry.body.toString())
---

<div class="metadata not-content">
  <div class="dates">
    <time datetime={entry.data.date.toISOString()}>
      {date}
    </time>
    {
      lastUpdated !== undefined &&
      typeof entry.data.lastUpdated !== 'boolean' &&
      entry.data.lastUpdated?.toISOString() !== entry.data.date.toISOString() ? (
        <span
          class="update-date"
          set:html={Astro.locals.t('starlightBlog.post.lastUpdate', {
            date: `<time datetime="${entry.data.lastUpdated?.toISOString()}">${lastUpdated}</time>`,
            interpolation: { escapeValue: false },
          })}
        />
      ) : null
    }
    {
      showReadingTime && readingTime.showReadingTime && (
        <span class="reading-time">
          &nbsp;-&nbsp;
          <Icon name="seti:clock" />
          {formatReadingTime(readingTime.readingTime)}
        </span>
      )
    }
  </div>
  {
    hasAuthors ? (
      <div class="authors">
        {authors.map((author) => (
          <Author {author} />
        ))}
      </div>
    ) : null
  }
  {
    showBadges && (entry.data?.draft || entry.data.featured) && (
      <div class="badges">
        {entry.data.draft && (
          <Badge size="medium" text={Astro.locals.t('starlightBlog.post.draft')} variant="caution" />
        )}
        {entry.data.featured && (
          <Badge size="medium" text={Astro.locals.t('starlightBlog.post.featured')} variant="note" />
        )}
      </div>
    )
  }
</div>

<style>
  .metadata {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .dates {
    font-size: var(--sl-text-sm);
  }

  .update-date {
    color: var(--sl-color-gray-3);
  }

  .reading-time {
    color: var(--sl-color-gray-3);
  }

  .reading-time svg {
    transform: translateY(2px);
    margin-right: 4px;
  }

  .authors {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem 1rem;
  }

  .badges {
    display: flex;
    gap: 0.75rem;
    margin-top: 0.5rem;
  }
</style>

---
import StarlightSidebar from '@astrojs/starlight/components/Sidebar.astro'
import type { Props } from '@astrojs/starlight/props'
import context from 'virtual:starlight-blog-context'

import { getAllAuthors } from '../libs/authors'
import { getSidebarBlogEntries } from '../libs/content'
import {
  getRelativeBlogUrl,
  getSidebarProps,
  isAnyBlogPage,
  isBlogAuthorsPage,
  isBlogRoot,
  isBlogTagsPage,
} from '../libs/page'
import { getAllTags } from '../libs/tags'
import { getBlogTitle } from '../libs/title'

const { id, locale } = Astro.props

const isBlog = isAnyBlogPage(id)
const { featured, recent } = isBlog ? await getSidebarBlogEntries(locale) : { featured: [], recent: [] }

const blogSidebar: Props['sidebar'] = isBlog
  ? [
      {
        attrs: {},
        badge: undefined,
        href: getRelativeBlogUrl('/', locale),
        isCurrent: isBlogRoot(id),
        label: Astro.locals.t('starlightBlog.sidebar.all'),
        type: 'link',
      },
    ]
  : []

if (isBlog) {
  if (featured.length > 0) {
    blogSidebar.push({
      badge: undefined,
      collapsed: false,
      entries: getSidebarProps(id, featured, locale),
      label: Astro.locals.t('starlightBlog.sidebar.featured'),
      type: 'group',
    })
  }

  blogSidebar.push({
    badge: undefined,
    collapsed: false,
    entries: getSidebarProps(id, recent, locale),
    label: Astro.locals.t('starlightBlog.sidebar.recent'),
    type: 'group',
  })

  const blogTags = await getAllTags(locale)

  if (blogTags.size > 0) {
    blogSidebar.push({
      badge: undefined,
      collapsed: false,
      entries: [...blogTags]
        .sort(([, a], [, b]) => {
          if (a.entries.length === b.entries.length) {
            return a.label.localeCompare(b.label)
          }

          return b.entries.length - a.entries.length
        })
        .map(([tagSlug, { entries, label }]) => ({
          attrs: {},
          badge: undefined,
          href: getRelativeBlogUrl(`/tags/${tagSlug}`, locale),
          isCurrent: isBlogTagsPage(id, tagSlug),
          label: `${label} (${entries.length})`,
          type: 'link',
        })),
      label: Astro.locals.t('starlightBlog.sidebar.tags'),
      type: 'group',
    })
  }

  const blogAuthors = await getAllAuthors(locale)

  if (blogAuthors.size > 1) {
    blogSidebar.push({
      badge: undefined,
      collapsed: false,
      entries: [...blogAuthors]
        .sort(([, a], [, b]) => {
          if (a.entries.length === b.entries.length) {
            return a.author.name.localeCompare(b.author.name)
          }

          return b.entries.length - a.entries.length
        })
        .map(([, { author, entries }]) => ({
          attrs: {},
          badge: undefined,
          href: getRelativeBlogUrl(`/authors/${author.slug}`, locale),
          isCurrent: isBlogAuthorsPage(id, author.slug),
          label: `${author.name} (${entries.length})`,
          type: 'link',
        })),
      label: Astro.locals.t('starlightBlog.sidebar.authors'),
      type: 'group',
    })
  }

  if (context.site) {
    blogSidebar.push({
      attrs: {},
      badge: undefined,
      href: getRelativeBlogUrl('/rss.xml', locale, true),
      isCurrent: false,
      label: Astro.locals.t('starlightBlog.sidebar.rss'),
      type: 'link',
    })
  }
}
---

{
  !isBlog && (
    <div class="md:sl-hidden">
      <a href={getRelativeBlogUrl('/', locale)}>{getBlogTitle(locale)}</a>
    </div>
  )
}
<StarlightSidebar {...Astro.props} sidebar={isBlog ? blogSidebar : Astro.props.sidebar} />

<style>
  div {
    border-bottom: 1px solid var(--sl-color-gray-6);
    padding-bottom: 1rem;
  }

  div a {
    color: var(--sl-color-white);
    font-size: var(--sl-text-lg);
    font-weight: 600;
    text-decoration: none;
    display: block;
  }
</style>

---
import StarlightSidebar from '@astrojs/starlight/components/Sidebar.astro'
import type { Props } from '@astrojs/starlight/props'
import config from 'virtual:starlight-blog-config'
import context from 'virtual:starlight-blog-context'

import { getSidebarBlogEntries } from '../libs/content'
import { getBlogPathWithBase, getSidebarProps, isAnyBlogPage, isBlogRoot, isBlogTagsPage } from '../libs/page'
import { getAllTags } from '../libs/tags'

const isBlog = isAnyBlogPage(Astro.props.slug)
const { featured, recent } = isBlog ? await getSidebarBlogEntries() : { featured: [], recent: [] }

const blogSidebar: Props['sidebar'] = isBlog
  ? [
      {
        attrs: {},
        badge: undefined,
        href: getBlogPathWithBase('/'),
        isCurrent: isBlogRoot(Astro.props.slug),
        label: 'All posts',
        type: 'link',
      },
    ]
  : []

if (isBlog) {
  if (featured.length > 0) {
    blogSidebar.push({
      badge: undefined,
      collapsed: false,
      entries: getSidebarProps(Astro.props.slug, featured),
      label: 'Featured posts',
      type: 'group',
    })
  }

  blogSidebar.push({
    badge: undefined,
    collapsed: false,
    entries: getSidebarProps(Astro.props.slug, recent),
    label: 'Recent posts',
    type: 'group',
  })

  const blogTags = await getAllTags()

  if (blogTags.size > 0) {
    blogSidebar.push({
      badge: undefined,
      collapsed: false,
      entries: [...blogTags]
        .sort(([, a], [, b]) => {
          if (a.entries.length === b.entries.length) {
            return a.label.localeCompare(b.label)
          }

          return b.entries.length - a.entries.length
        })
        .map(([slug, { entries, label }]) => ({
          attrs: {},
          badge: undefined,
          href: getBlogPathWithBase(`/tags/${slug}`),
          isCurrent: isBlogTagsPage(Astro.props.slug, slug),
          label: `${label} (${entries.length})`,
          type: 'link',
        })),
      label: 'Tags',
      type: 'group',
    })
  }

  if (context.site) {
    blogSidebar.push({
      attrs: {},
      badge: undefined,
      href: getBlogPathWithBase('/rss.xml', true),
      isCurrent: false,
      label: 'RSS',
      type: 'link',
    })
  }
}
---

{
  !isBlog && (
    <div class="md:sl-hidden">
      <a href={getBlogPathWithBase('/')}>{config.title}</a>
    </div>
  )
}
<StarlightSidebar {...Astro.props} sidebar={isBlog ? blogSidebar : Astro.props.sidebar} />

<style>
  div {
    border-bottom: 1px solid var(--sl-color-gray-6);
    padding-bottom: 1rem;
  }

  div a {
    color: var(--sl-color-white);
    font-size: var(--sl-text-lg);
    font-weight: 600;
    text-decoration: none;
    display: block;
  }
</style>
